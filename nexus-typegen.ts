/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  GENDER: "FEMALE" | "MALE"
  ROLE: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  Email: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Todo: { // root type
    completed?: boolean | null; // Boolean
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    id?: string | null; // String
    title?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  User: { // root type
    active?: boolean | null; // Boolean
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    dob?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    emailVerified?: NexusGenScalars['DateTime'] | null; // DateTime
    gender?: NexusGenEnums['GENDER'] | null; // GENDER
    id?: string | null; // String
    image?: string | null; // String
    name?: string | null; // String
    password?: string | null; // String
    passwordResetCode?: string | null; // String
    phone?: string | null; // String
    role?: NexusGenEnums['ROLE'] | null; // ROLE
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    verificationCode?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    CompleteTodo: NexusGenRootTypes['Todo']; // Todo!
    CreateTodo: NexusGenRootTypes['Todo']; // Todo!
    CreateUser: NexusGenRootTypes['User']; // User!
    DeleteTodo: NexusGenRootTypes['Todo']; // Todo!
    LoginUser: NexusGenRootTypes['User']; // User!
    UpdateTodo: NexusGenRootTypes['Todo']; // Todo!
  }
  Query: { // field return type
    GetSingleTodo: NexusGenRootTypes['Todo']; // Todo!
    GetTodos: Array<NexusGenRootTypes['Todo'] | null>; // [Todo]!
    GetUser: NexusGenRootTypes['User']; // User!
  }
  Todo: { // field return type
    completed: boolean | null; // Boolean
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    id: string | null; // String
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  User: { // field return type
    active: boolean | null; // Boolean
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    dob: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    emailVerified: NexusGenScalars['DateTime'] | null; // DateTime
    gender: NexusGenEnums['GENDER'] | null; // GENDER
    id: string | null; // String
    image: string | null; // String
    name: string | null; // String
    password: string | null; // String
    passwordResetCode: string | null; // String
    phone: string | null; // String
    role: NexusGenEnums['ROLE'] | null; // ROLE
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    verificationCode: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    CompleteTodo: 'Todo'
    CreateTodo: 'Todo'
    CreateUser: 'User'
    DeleteTodo: 'Todo'
    LoginUser: 'User'
    UpdateTodo: 'Todo'
  }
  Query: { // field return type name
    GetSingleTodo: 'Todo'
    GetTodos: 'Todo'
    GetUser: 'User'
  }
  Todo: { // field return type name
    completed: 'Boolean'
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    title: 'String'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    active: 'Boolean'
    createdAt: 'DateTime'
    dob: 'DateTime'
    email: 'String'
    emailVerified: 'DateTime'
    gender: 'GENDER'
    id: 'String'
    image: 'String'
    name: 'String'
    password: 'String'
    passwordResetCode: 'String'
    phone: 'String'
    role: 'ROLE'
    updatedAt: 'DateTime'
    verificationCode: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CompleteTodo: { // args
      completed: boolean; // Boolean!
      id: string; // String!
    }
    CreateTodo: { // args
      description?: string | null; // String
      title?: string | null; // String
    }
    CreateUser: { // args
      email: NexusGenScalars['Email']; // Email!
      name: string; // String!
      password: string; // String!
    }
    DeleteTodo: { // args
      id: string; // String!
    }
    LoginUser: { // args
      email: NexusGenScalars['Email']; // Email!
      password: string; // String!
    }
    UpdateTodo: { // args
      description?: string | null; // String
      id: string; // String!
      title?: string | null; // String
    }
  }
  Query: {
    GetSingleTodo: { // args
      id: string; // String!
    }
    GetUser: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}